kotlin version: 2.0.21
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: C:/Users/Chris/Proyectos/Android/ReactorCompose/reactor/src/main/java/com/animotionsoftware/lib/reactor/composables/FlowExtension.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:246)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:142)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:148)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:103)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:49)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:675)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1660)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN FUNCTION_FOR_DEFAULT_PARAMETER name:collectAsReactorStateWithLifecycle$default visibility:public modality:FINAL <T> ($receiver:kotlinx.coroutines.flow.StateFlow<com.animotionsoftware.lib.reactor.viewmodel.ReactorState<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default>>, lifecycleOwner:androidx.lifecycle.LifecycleOwner?, minActiveState:androidx.lifecycle.Lifecycle.State?, context:kotlin.coroutines.CoroutineContext?, $mask0:kotlin.Int, $handler:kotlin.Any?) returnType:androidx.compose.runtime.State<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default>
  annotations:
    Composable
    Suppress(names = ["StateFlowValueCalledInComposition"])
  TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false
  $receiver: VALUE_PARAMETER name:<this> type:kotlinx.coroutines.flow.StateFlow<com.animotionsoftware.lib.reactor.viewmodel.ReactorState<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default>>
  VALUE_PARAMETER name:lifecycleOwner index:0 type:androidx.lifecycle.LifecycleOwner? [assignable]
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=androidx.lifecycle.LifecycleOwner
  VALUE_PARAMETER name:minActiveState index:1 type:androidx.lifecycle.Lifecycle.State? [assignable]
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=androidx.lifecycle.Lifecycle.State
  VALUE_PARAMETER name:context index:2 type:kotlin.coroutines.CoroutineContext? [assignable]
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.coroutines.CoroutineContext
  VALUE_PARAMETER MASK_FOR_DEFAULT_FUNCTION name:$mask0 index:3 type:kotlin.Int
  VALUE_PARAMETER METHOD_HANDLER_IN_DEFAULT_FUNCTION name:$handler index:4 type:kotlin.Any?
  BLOCK_BODY
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=1
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'lifecycleOwner: androidx.lifecycle.LifecycleOwner? [assignable] declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlin.Unit origin=EQ
          CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=androidx.lifecycle.LifecycleOwner origin=GET_PROPERTY
            $this: TYPE_OP type=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal> origin=IMPLICIT_CAST typeOperand=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal>
              CALL 'public final fun <get-LocalLifecycleOwner> (): androidx.compose.runtime.ProvidableCompositionLocal<androidx.lifecycle.LifecycleOwner> declared in androidx.lifecycle.compose.LocalLifecycleOwnerKt' type=androidx.compose.runtime.ProvidableCompositionLocal<androidx.lifecycle.LifecycleOwner> origin=GET_PROPERTY
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=2
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'minActiveState: androidx.lifecycle.Lifecycle.State? [assignable] declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlin.Unit origin=EQ
          GET_FIELD 'FIELD FIELD_FOR_ENUM_ENTRY name:STARTED type:androidx.lifecycle.Lifecycle.State visibility:public [final,static] declared in androidx.lifecycle.Lifecycle.State' type=androidx.lifecycle.Lifecycle.State origin=null
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=4
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'context: kotlin.coroutines.CoroutineContext? [assignable] declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlin.Unit origin=EQ
          GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:INSTANCE type:kotlin.coroutines.EmptyCoroutineContext visibility:public [final,static] declared in kotlin.coroutines.EmptyCoroutineContext' type=kotlin.coroutines.EmptyCoroutineContext origin=null
    RETURN type=kotlin.Nothing from='public final fun collectAsReactorStateWithLifecycle$default <T> (lifecycleOwner: androidx.lifecycle.LifecycleOwner?, minActiveState: androidx.lifecycle.Lifecycle.State?, context: kotlin.coroutines.CoroutineContext?, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.runtime.State<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default> declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt'
      CALL 'public final fun collectAsReactorStateWithLifecycle <T> (lifecycleOwner: androidx.lifecycle.LifecycleOwner, minActiveState: androidx.lifecycle.Lifecycle.State, context: kotlin.coroutines.CoroutineContext): androidx.compose.runtime.State<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle> declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt' type=androidx.compose.runtime.State<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle> origin=DEFAULT_STUB_CALL_TO_IMPLEMENTATION
        <T>: T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default
        $receiver: GET_VAR '<this>: kotlinx.coroutines.flow.StateFlow<com.animotionsoftware.lib.reactor.viewmodel.ReactorState<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default>> declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlinx.coroutines.flow.StateFlow<com.animotionsoftware.lib.reactor.viewmodel.ReactorState<T of com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default>> origin=null
        lifecycleOwner: TYPE_OP type=androidx.lifecycle.LifecycleOwner origin=IMPLICIT_CAST typeOperand=androidx.lifecycle.LifecycleOwner
          GET_VAR 'lifecycleOwner: androidx.lifecycle.LifecycleOwner? [assignable] declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=androidx.lifecycle.LifecycleOwner? origin=null
        minActiveState: TYPE_OP type=androidx.lifecycle.Lifecycle.State origin=IMPLICIT_CAST typeOperand=androidx.lifecycle.Lifecycle.State
          GET_VAR 'minActiveState: androidx.lifecycle.Lifecycle.State? [assignable] declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=androidx.lifecycle.Lifecycle.State? origin=null
        context: TYPE_OP type=kotlin.coroutines.CoroutineContext origin=IMPLICIT_CAST typeOperand=kotlin.coroutines.CoroutineContext
          GET_VAR 'context: kotlin.coroutines.CoroutineContext? [assignable] declared in com.animotionsoftware.lib.reactor.composables.FlowExtensionKt.collectAsReactorStateWithLifecycle$default' type=kotlin.coroutines.CoroutineContext? origin=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:40)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:406)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:423)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:168)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 43 more
Caused by: org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Couldn't inline method call: CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=androidx.lifecycle.LifecycleOwner origin=GET_PROPERTY
Method: null
File is unknown
The root cause java.lang.IllegalStateException was thrown at: org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:65)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genInlineCall(IrInlineCodegen.kt:163)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCallGenerator.genCall(IrInlineCallGenerator.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:653)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitSetValue(ExpressionCodegen.kt:935)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitSetValue(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrSetValue.accept(IrSetValue.kt:21)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitWhen(ExpressionCodegen.kt:1101)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitWhen(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrWhen.accept(IrWhen.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:584)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:240)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:123)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:44)
	... 53 more
Caused by: java.lang.IllegalStateException: couldn't find inline method Landroidx/compose/runtime/CompositionLocal;.getCurrent()Ljava/lang/Object;
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.loadCompiledInlineFunction(SourceCompilerForInline.kt:96)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.compileInlineFunction(IrSourceCompilerForInline.kt:91)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.compileInline(InlineCodegen.kt:43)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:51)
	... 71 more


